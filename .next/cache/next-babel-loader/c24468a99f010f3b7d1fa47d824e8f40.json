{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { useState } from 'react';\nimport useStats from '../utils/useStats';\nimport Stats from './Stats';\nexport default function CountrySelector() {\n  var _useStats = useStats('https://covid19.mathdro.id/api/countries'),\n      countries = _useStats.stats,\n      loading = _useStats.loading,\n      error = _useStats.error;\n\n  var _useState = useState('BRB'),\n      selectedCountry = _useState[0],\n      setSelectedCountry = _useState[1];\n\n  if (loading) return __jsx(\"p\", null, \"Loading...\");\n  if (loading) return __jsx(\"p\", null, \"Loading...\");\n  if (error) return __jsx(\"p\", null, \"Error...\");\n  var newStructure = {\n    countries: {},\n    iso3: {}\n  };\n\n  var _iterator = _createForOfIteratorHelper(countries.countries),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var country = _step.value;\n      newStructure.countries[country.name] = country.iso2;\n      newStructure.iso3[country.iso2] = country.iso3;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return __jsx(\"div\", {\n    className: \"countrySelector\"\n  }, __jsx(\"h2\", null, \"Currently Showing \", selectedCountry), __jsx(\"select\", {\n    onChange: function onChange(e) {\n      setSelectedCountry(e.target.value);\n    }\n  }, Object.entries(newStructure.countries).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        country = _ref2[0],\n        code = _ref2[1];\n\n    return __jsx(\"option\", {\n      selected: selectedCountry === newStructure.iso3[code],\n      key: code,\n      value: newStructure.iso3[code]\n    }, country);\n  })), __jsx(Stats, {\n    url: \"https://covid19.mathdro.id/api/countries/\".concat(selectedCountry)\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}